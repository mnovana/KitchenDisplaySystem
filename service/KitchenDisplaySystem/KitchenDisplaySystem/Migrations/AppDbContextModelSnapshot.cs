// <auto-generated />
using System;
using KitchenDisplaySystem.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KitchenDisplaySystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KitchenDisplaySystem.Models.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FoodTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("FoodTypeId");

                    b.ToTable("Food");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FoodTypeId = 1,
                            Name = "Brusketi sa paradajzom i bosiljkom"
                        },
                        new
                        {
                            Id = 2,
                            FoodTypeId = 1,
                            Name = "Brusketi sa dimljenim lososom i rukolom"
                        },
                        new
                        {
                            Id = 3,
                            FoodTypeId = 1,
                            Name = "Tortilja sa kremastom dimljenom butkicom"
                        },
                        new
                        {
                            Id = 4,
                            FoodTypeId = 1,
                            Name = "Focaccia sa grilovanim sirom, čeri paradajzom i pršutom"
                        },
                        new
                        {
                            Id = 5,
                            FoodTypeId = 2,
                            Name = "Ćuretina sa mlincima"
                        },
                        new
                        {
                            Id = 6,
                            FoodTypeId = 2,
                            Name = "Bečke kobasice sa sirom"
                        },
                        new
                        {
                            Id = 7,
                            FoodTypeId = 2,
                            Name = "Tradicionalni ćevapi na kajmaku (350g)"
                        },
                        new
                        {
                            Id = 8,
                            FoodTypeId = 2,
                            Name = "Pikantni uštipci"
                        },
                        new
                        {
                            Id = 9,
                            FoodTypeId = 2,
                            Name = "Piletina terijaki"
                        },
                        new
                        {
                            Id = 10,
                            FoodTypeId = 3,
                            Name = "Miks zelenih salata"
                        },
                        new
                        {
                            Id = 11,
                            FoodTypeId = 3,
                            Name = "Šopska salata"
                        },
                        new
                        {
                            Id = 12,
                            FoodTypeId = 3,
                            Name = "Srpska salata"
                        },
                        new
                        {
                            Id = 13,
                            FoodTypeId = 3,
                            Name = "Vitaminska salata"
                        },
                        new
                        {
                            Id = 14,
                            FoodTypeId = 4,
                            Name = "Palačinke sa medom i orasima"
                        },
                        new
                        {
                            Id = 15,
                            FoodTypeId = 4,
                            Name = "Pita sa borovnicom"
                        },
                        new
                        {
                            Id = 16,
                            FoodTypeId = 4,
                            Name = "Šnenokle"
                        });
                });

            modelBuilder.Entity("KitchenDisplaySystem.Models.FoodType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("FoodTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Predjelo"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Glavno jelo"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Salata"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Desert"
                        });
                });

            modelBuilder.Entity("KitchenDisplaySystem.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Served")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.Property<int>("WaiterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.HasIndex("WaiterId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            End = new DateTime(2024, 6, 24, 15, 59, 38, 461, DateTimeKind.Local).AddTicks(8710),
                            Note = "Salata bez ulja!",
                            Served = false,
                            Start = new DateTime(2024, 6, 24, 15, 45, 38, 461, DateTimeKind.Local).AddTicks(8632),
                            TableId = 1,
                            WaiterId = 1
                        });
                });

            modelBuilder.Entity("KitchenDisplaySystem.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "FoodId");

                    b.HasIndex("FoodId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            FoodId = 1,
                            Quantity = 1
                        },
                        new
                        {
                            OrderId = 1,
                            FoodId = 8,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 1,
                            FoodId = 13,
                            Quantity = 1
                        },
                        new
                        {
                            OrderId = 1,
                            FoodId = 15,
                            Quantity = 3
                        });
                });

            modelBuilder.Entity("KitchenDisplaySystem.Models.Table", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Number = 10
                        },
                        new
                        {
                            Id = 2,
                            Number = 11
                        },
                        new
                        {
                            Id = 3,
                            Number = 12
                        },
                        new
                        {
                            Id = 4,
                            Number = 13
                        },
                        new
                        {
                            Id = 5,
                            Number = 14
                        });
                });

            modelBuilder.Entity("KitchenDisplaySystem.Models.Waiter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DisplayName")
                        .IsUnique();

                    b.ToTable("Waiters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayName = "Marko M.",
                            Name = "Marko",
                            Phone = "0618521114",
                            Surname = "Marković"
                        },
                        new
                        {
                            Id = 2,
                            DisplayName = "Marko J.",
                            Name = "Marko",
                            Phone = "0612336852",
                            Surname = "Jovanović"
                        },
                        new
                        {
                            Id = 3,
                            DisplayName = "Jovana",
                            Name = "Jovana",
                            Phone = "0632448752",
                            Surname = "Jovanović"
                        },
                        new
                        {
                            Id = 4,
                            DisplayName = "Petar",
                            Name = "Petar",
                            Phone = "0603352291",
                            Surname = "Petrović"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a4cb9cf6-e1fe-4913-969d-f622cbd2bd84",
                            ConcurrencyStamp = "1",
                            Name = "Kitchen",
                            NormalizedName = "KITCHEN"
                        },
                        new
                        {
                            Id = "061d252f-f801-443d-9506-900d13f090fd",
                            ConcurrencyStamp = "2",
                            Name = "Waiter",
                            NormalizedName = "WAITER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "10335569-4b56-45f7-b029-c705d304bf52",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "19f580bb-5b1b-4bb2-88f0-1ef96a2609b9",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "KITCHEN",
                            PasswordHash = "AQAAAAIAAYagAAAAEI38NQHNBtTfp7HEEySqGeec+xl1gSnroFBMGbBAlnIhEGBp/C/lv8L1xIc6z8x1wA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d09a84d0-638e-4856-aa74-dbba77a64ab7",
                            TwoFactorEnabled = false,
                            UserName = "kitchen"
                        },
                        new
                        {
                            Id = "7df3d20c-7e1b-4581-8546-f03510dda802",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6b295909-2c0b-41dc-891a-471b6921aa51",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "WAITER",
                            PasswordHash = "AQAAAAIAAYagAAAAEDo5htmc4JKvVCjzzx4LicTWGyXPtj3tfKBrOayFL/NZqKjNKtU0eKjTu8jPJQnl9Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "807d732b-0a96-467c-981e-a5b65254faf4",
                            TwoFactorEnabled = false,
                            UserName = "waiter"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "10335569-4b56-45f7-b029-c705d304bf52",
                            RoleId = "a4cb9cf6-e1fe-4913-969d-f622cbd2bd84"
                        },
                        new
                        {
                            UserId = "7df3d20c-7e1b-4581-8546-f03510dda802",
                            RoleId = "061d252f-f801-443d-9506-900d13f090fd"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KitchenDisplaySystem.Models.Food", b =>
                {
                    b.HasOne("KitchenDisplaySystem.Models.FoodType", "FoodType")
                        .WithMany()
                        .HasForeignKey("FoodTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodType");
                });

            modelBuilder.Entity("KitchenDisplaySystem.Models.Order", b =>
                {
                    b.HasOne("KitchenDisplaySystem.Models.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KitchenDisplaySystem.Models.Waiter", "Waiter")
                        .WithMany()
                        .HasForeignKey("WaiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("Waiter");
                });

            modelBuilder.Entity("KitchenDisplaySystem.Models.OrderItem", b =>
                {
                    b.HasOne("KitchenDisplaySystem.Models.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KitchenDisplaySystem.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KitchenDisplaySystem.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
